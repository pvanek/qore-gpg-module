/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  libmagic Qore wrapper

  Qore Programming Language

  Copyright 2012 - 2013 Petr Vanek, Qore Technologies

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <qore/Qore.h>
#include "gpgtools.h"


/** @defgroup gpg_constants gpg Constants
*/
//@{

//! No flags
const MAGIC_NONE              = 0x000000;
//@}


/** @defgroup gpg_functions GPG Functions
 */
//@{
namespace Qore::GPG;

//! TODO/FIXME
/** 
 */
binary gpg_encrypt(string input, list keys) [flags=RET_VALUE_ONLY] {
    gpgme_ctx_t ctx;
    gpgme_error_t err;
    gpgme_data_t in, out;
    gpgme_key_t* key;
    gpgme_encrypt_result_t result;

    // TODO/FIXME: localles? See init_gpgme in t-support.h of gpgme examples
    // TODO/FIXME: constant? OpenPGP/CMS/UNKNOWN
    err = gpgme_engine_check_version(GPGME_PROTOCOL_OpenPGP);
    QGPG_ERRCHECK(err);
      
    err = gpgme_new (&ctx);
    QGPG_ERRCHECK(err);
    gpgme_set_armor (ctx, 1);

    // gpgme_data_t *dh, const char *buffer, size_t size, int copy
    err = gpgme_data_new_from_mem (&in, input->getBuffer(), input->strlen(), 0);
    QGPG_ERRCHECK(err);
  
    err = gpgme_data_new (&out);
    QGPG_ERRCHECK(err);
    
    key = malloc(keys->size() * sizeof(gpgme_key_t));

    ListIterator i(keys);
    while (i.next()) {
        QoreStringValueHelper str(i.getValue());
        
        err = gpgme_get_key (ctx, "A0FF4590BB6122EDEF6E3C542D727CC768697734",
                             &key[i.index()], 0);
        // TODO/FIXME: cleanup on exit
        QGPG_ERRCHECK(err);
    }

    // TODO/FIXME: constants? GPGME_ENCRYPT_ALWAYS_TRUST
    err = gpgme_op_encrypt (ctx, key, GPGME_ENCRYPT_ALWAYS_TRUST, in, out);
    QGPG_ERRCHECK(err);

    result = gpgme_op_encrypt_result (ctx);
    if (result->invalid_recipients)
    {
        fprintf (stderr, "Invalid recipient encountered: %s\n",
                 result->invalid_recipients->fpr);
        exit (1);
    }
    print_data (out);
  
    for (int i = 0; i < keys->size(); ++i)
        gpgme_key_unref (key[i]);
    free(key);

    gpgme_data_release (in);
    gpgme_data_release (out);
    gpgme_release (ctx);
    return 0;
}

//@}


